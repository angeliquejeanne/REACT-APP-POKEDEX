{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anggi\\\\Desktop\\\\REACT-POKEMONS-APP\\\\src\\\\components\\\\pokemon-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport formatType from '../helpers/format-type';\n\nconst PokemonForm = ({\n  pokemon\n}) => {\n  const history = useHistory();\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      const newField = {\n        value: newTypes\n      };\n      setForm({ ...form,\n        ...{\n          types: newField\n        }\n      });\n    } else {\n      // Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      const newField = {\n        value: newTypes\n      };\n      setForm({ ...form,\n        ...{\n          types: newField\n        }\n      });\n    }\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const validateForm = () => {\n    let newForm = form; // Validator name\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypesValid = type => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    } // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n    return true;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      history.push(`/pokemons/${pokemon.id}`);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col s12 m8 offset-m2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card hoverable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: pokemon.picture,\n    alt: pokemon.name,\n    style: {\n      width: '250px',\n      margin: '0 auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-stacked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 19\n    }\n  }, \"Nom\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    className: \"form-control\",\n    value: form.name.value,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }), form.name.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }, form.name.error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"hp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }, \"Point de vie\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"hp\",\n    type: \"number\",\n    name: \"hp\",\n    className: \"form-control\",\n    value: form.hp.value,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  }), form.hp.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, form.hp.error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, \"D\\xE9g\\xE2ts\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cp\",\n    type: \"number\",\n    name: \"cp\",\n    className: \"form-control\",\n    value: form.cp.value,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }), form.cp.error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-panel red accent-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 19\n    }\n  }, form.cp.error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"Types\"), types.map(type => /*#__PURE__*/React.createElement(\"div\", {\n    key: type,\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: type,\n    type: \"checkbox\",\n    name: \"types\",\n    className: \"filled-in\",\n    value: type,\n    checked: hasType(type),\n    disabled: !isTypesValid(type),\n    onChange: e => selectType(type, e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: formatType(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 27\n    }\n  }, type))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-action center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, \"Valider\")))))));\n};\n\nexport default PokemonForm;","map":{"version":3,"sources":["C:/Users/anggi/Desktop/REACT-POKEMONS-APP/src/components/pokemon-form.tsx"],"names":["React","useState","useHistory","formatType","PokemonForm","pokemon","history","form","setForm","name","value","isValid","hp","cp","types","hasType","type","includes","selectType","e","checked","target","newTypes","concat","newField","filter","currentType","handleInputChange","fieldName","fieldValue","validateForm","newForm","test","errorMsg","error","isTypesValid","length","handleSubmit","preventDefault","isFormValid","push","id","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\n\r\ntype Props = {\r\n  pokemon: Pokemon\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  name: Field,\r\n  hp: Field,\r\n  cp: Field,\r\n  types: Field\r\n}\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    name: { value: pokemon.name, isValid: true },\r\n    hp: { value: pokemon.hp, isValid: true },\r\n    cp: { value: pokemon.cp, isValid: true },\r\n    types: { value: pokemon.types, isValid: true }\r\n  });\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];\r\n\r\n  const hasType = (type: string): boolean => {\r\n    return form.types.value.includes(type);\r\n  }\r\n\r\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const checked = e.target.checked;\r\n\r\n    if(checked) {\r\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\r\n      const newTypes: string[] = form.types.value.concat([type]);\r\n      const newField: Field = { value: newTypes };\r\n\r\n      setForm({...form, ...{ types: newField }});\r\n    } else {\r\n      // Si l'utilisateur décoche un type, on le retire à la liste des types du pokémon.\r\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n      const newField: Field = { value: newTypes };\r\n\r\n      setForm({...form, ...{ types: newField }});\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n    \r\n    // Validator name\r\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    }\r\n\r\n    // Validator hp\r\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    }\r\n\r\n    // Validator cp\r\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n  }\r\n\r\n  const isTypesValid = (type: string): boolean => {\r\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n    if (form.types.value.length === 1 && hasType(type)) {\r\n      return false;\r\n    }\r\n    \r\n    // Cas n°1: Le pokémon a au moins 3 types.\r\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n    if (form.types.value.length >= 3 && !hasType(type)) { \r\n      return false; \r\n    } \r\n    \r\n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n    return true;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      history.push(`/pokemons/${pokemon.id}`);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\"> \r\n            <div className=\"card-image\">\r\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n            </div>\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" type=\"text\" name=\"name\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.name.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.name.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" type=\"number\" name=\"hp\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.hp.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.hp.error}\r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" type=\"number\" name=\"cp\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.cp.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.cp.error}\r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n                        <input id={type} type=\"checkbox\" name=\"types\" className=\"filled-in\" value={type} checked={hasType(type)} disabled={!isTypesValid(type)} onChange={e => selectType(type, e)}></input>\r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n \r\nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}